

// reducer 는 상태입니다 (useState 대체)
// 전역상태관리는 다양한 컴포넌트에서 변경이 된다는걸 전제
// reducer + context를 같이 활용하는 경우가 많다
// 다만, reducer 대신 customhook으로 대체해도 괜찮다 
// 커스텀 훅을 만들었는데 상태를 변경하는 로직이 너무 거대해서 분리하고 싶을 때 -> reducer 고려
// 커스텀 훅 내부에서 로직 변경이 재사용 -> reducer 고려
// 커스텀 훅 안에 커스텀 훅 -> 커플링(결합도) X -> reducer 고려

-----------------------------------------------------------

Redux

Reducer + Context를 합쳐서 사용하는 코드, 다만 개발에 용이한 확장 프로그램 지원
서버에서 가져온 데이터를 dispatch 하나로 할 수 있도록 상태 관리 용이 미들웨어 지원 (thunk, saga)

1. Context를 분리하려면 여러개 생성해야하는데 여러개 생성할 필요없이 하나의 저장소에 분기처리
2. 개발에 용이한 확장프로그램 제공 (logger, devtools)
3. 서버에서 데이터를 패치해올 때 용이한 상태를 생성하거나 프로세스를 진행 (성공/실패) (thunk, saga)
4. 상태 불변성 지키지 않아도 되는 도구 내정되어 제공 (rtk)

React에서 추구하는 flux 패턴을 바탕

MFA 마이크로프론트엔드 아키텍쳐

단방향 데이터 통신을 추구

action (value, payload) -> dispatch -> store -> view

모든 데이터는 중앙 허브인 dispatch를 통해 store에 저장된다

-----------------------------------------------------------

npm i redux react-redux
npm i redux-logger redux-devtools (Optional)

-----------------------------------------------------------