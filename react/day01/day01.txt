

React? 
meta에서 개발한 자바스크립트 기반의 프레임워크/라이브러리

React 이전과 이후를 명확히 알 필요가 있습니다.
이전에는 어떻게 개발을 했을까? 또 무엇이 불편해서 React가 개발되었을까

post.html
--> php 이용해서 html 파일을 불러와서 해당 위치에 html을 보여주는 형태로

css( reset.css, common.css, layout.css)
js (script.js, post.js)

assets

---------------------------

nodes.js, 모듈 번들러
>> 브라우저 외부에서 javascript를 실행할 수 있는 런타임(환경)
>> 모듈 번틀러는 분산 되어있는 모듈(코드의 집합)들을 정리하는 역할

-> javascript를 외부에서 사용할 수 있고, 모듈 번들러를 통해서 코드 분리가 자유로워졌다
-> 하나의 html을 분리해서 javascript로 작성하고 조립하는 형태로 사용해보는게 어떨까
-> 자주 사용하는 html  

=> html을 분리해서 한가지 이상의 기능 js, css, html을 한번에 관리할 수 있도록

---------------------------

React의 특징

1. 컴포넌트 (한가지 이상의 기능을 하는 UI 모듈) ---> js) banner.js
---> 확장이 쉽다. 

2. 가상돔을 활용

dom.style.color = 'red'
리플로우 / 리페인트

자바스크립트에서 요소의 스타일의 수정이 발생했을 때 해당 요소를 다시 그리는 행위

(1) 가상돔을 활용해서 dom을 객체와 -> domAPI에 접근하지 않아도 된다, 바뀐 객체만 화면을 다시 그릴 수 있는데
(2) 돔의 업데이트의 제어권이 개발자에게 있다는 장덤 -> 리플로우 / 리페인트 자겁이 최소화
---> 돔의 업데이트를 개발자가 하고 싶을 때 할 수 있다

3. js파일을 사용하며 html, css, js를 묶는 단위가 함수/클래스 (React 16버전 이후 지원 X)
---> 가상돔은 돔의 객체 (html)

React는 함수형(js)으로 이루어져있기 때문에 DOM API 사용을 지양합니다
무조건 쓰면 안되나 document.addEventListener() 최상위 요소에 접근해야하하거나 반드시 요소에 접근하는 경우를 제외하고 사용하지 않기를 권고

---------------------------

주의해야 할 것

  javascript vs React 

  무조건 React가 빠르고 좋은 것은 아닙니다. 다만, react가 가지고 있는 환경이 가치가 높습니다.

---------------------------

React를 사용해봅시다

이둘의 차이점은 개발의 제어권이 누구한테 있느냐

프레임워크 -> 로그인을 할거면 우리가 제공하는 기능을 반드시 사용해라
라이브러리 -> 로그인하고 싶어? 너가 원하는거 선택해서 골라서 써봐 우리는 틀만 제공할게

주의점 라이브러리의 경우는 메인테이너가 많다 -> 관리되지 않거나 버려지는 코드들이 많다는 것
라이브러리는 항상 잘 관리되고 있는지 확인하고 비교하고 사용해볼 것

---------------------------

1. 직접 처음부터 셋팅하는 방법
2. 명령어 하나만으로 리액트 세팅이 모두 끝나는 서비스 (폴더구조, 트랜스파일, 모듈번들러, 스크립트)
 (CRA, vite)

 ---------------------------

 2번부터 해볼겁니다
 2-1 >> CRA (create react app)

 프론트엔드를 (서버)에 배포하는 방법
 라우팅 연결 -> 경로와 파일을 연결 -> /admin, -->
 index.html ---> entry 파일 이동했을 때 .html

 라우팅을 연결하려면 백엔드 서버가 하는 경우가 많았음 --> React는 여려분들이 직접 라우팅을 지정

여러분들 컴퓨터에서 로컬 웹서버가 실행이 됩니다.
이 서버를 실행하려면 파일을 분석해서 실행할 수 있도록 해야겠죠 -> 빌드

---------------------------

node_modules (연한색) 
>> 설치하게 될 라이브러리들의 실제 코드
>> 라이브러리들의 정보는 package.json에 기록되기 때문에 용량이 큰 node_modules는 
git에 올라가지 않는다 --> 동기화를 위해서는 항상 install을 해주어야한다


public
>> favicon.ico
>> index.html --> react는 SPA (페이지가 하나인 앱)
>> logo --> 이미지 asset
>> manifest.json --> 페이지 설명
>> robots.txt --> 검색 엔진과 관련된 파일



scr  -> 실제로 소스코드를 작성하는 공간
>> app.js ---> 여러분들의 컴포넌트들이 하나로 합쳐지는 공간
>> index.js ---> index.html에 app.js에 작성된 코드를 랜더링

>> setupTests.js ---> 테스트코드 작성할 때 전역으로 설정해주는 파일


.gitignore
>> git에 올라가지 말아야할 파일 정의

package-lock.json
>> 설치된 라이브러리의 다운로드 정보



package.json
>> 프로젝트 정보 입력, 명령어, 설치된 라이브러리들의 정보


README.md
>> 깃에 대문 작성

---------------------------

1. React를 사용하는 이유 -> 불편함 -> 해소

>> 5000줄 이상의 큰 html 파일을 관리한 경험
>> 리플로우 / 리페인트에 대한 개념을 이해

---------------------------

2. React의 폴더 구조
package.json, index.html, index.js, app.js, node_modules

각 구조의 역할

---------------------------

3. 내일 배울 내용

- npm package (npm run start) -> npm = 패키지 매니저 도구 -> 라이브러리들 설치
- react router 
- css in js

layout 폴더
header.js
footer.js
layout.js


1.
pages 폴더
    home
        component
            content.js
            search.js // 중복
            side.js
        home.js
    post.js
        component
            search.js // 중복


2.
components 폴더
    home
        content.js
        search.js
        side.js

    common  
        1.search.js

3. shared
    components
        2. search.js




---------------------------

페이지 컴포넌트
UI 컴포넌트
중복되는 UI 컴포넌트
UI 컴포넌트를 구성하는 컴포넌트
UI 컴포넌트를 구성하는 컴포넌트 구성하는 컴포넌트

---------------------------

레이어를 정의하고 폴더 구조를 정의하는 것
해당 폴더 구조에 익숙하지 않으면 수업 진도 따라가기 어려워짐

