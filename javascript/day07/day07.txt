filter
    배열을 순회하며 조건을 만족하는 요소로만 이루어진 새로운 배열

    arr.filter( () => {} )

    예시
    쇼핑몰 -> 옷을 검색 -> 필터 -> 색깔이 빨간색인 옷
    (실제 서비스 상에서는 서버에게 데이터를 보내서 필터하는 경우가 많음)

    pagenation
    < 1, 2, 3, 4, 5 >
    "page = 1" << 서버

    const arr = [1, 2, 3, 4, 5]
    const filter_arr = arr.filter((el, index) => el % === 0 )
                                --- 반환하는 결과가 true인 요소만

-------------------------------------------

find
    특정 조건을 만족하는 요소 1가지를 검색
    객체나 배열에서 find를 사용할 때 중첩객체문에서 사용하게 되면 만족하는 결과가
    나오지 않을 수도 있어요

    const posts = [
        {
            id: 1,
            title: "example"
            content: "example"
            User: {
                name: "zl존준규123"
            }
        },
    ]

    const findPost = posts.find((post) => post.id === 1)
        ---- 객체 -> 참조값
    
    findPost = {
        ...findPost,
        title: "안녕하세요"
    } //새로운 객체 생성 참조값 변경

    findPost.title = "안녕하세요" 


-------------------------------------------

findIndex
    find와 같은 특정 조건에 맞는 요소의 인덱스

    const postsIndex =posts.findIndex((post) => post.id === 1) // 0 

    posts[postsIndex] = {
        ...findPost,
        title: "안녕하세요"
    }

    중복된 결과가 있다면 가장 먼저 검색된 것

    나 2개 찾고싶어 -> filter
    1가지의 내가 만족하는 특정 요소나 인덱스 -> find, findIndex



-------------------------------------------

every 

    특정 조건을 모든 요소가 만족하는지 확인하고 boolean



-------------------------------------------

some

    특정 조건을 일부 요소가 만족하는지 확인하고 boolean

    데이터가 있는지 확인하기 위해서 find를 사용 (x) -> some 사용 (있는지 없는지만 확인할 때)
    find는 요소를 찾고 그 요소를 활용해야할 때 

    const isSome = posts.some((post) => post.id === 1)
    if(!isSome) return;


-------------------------------------------

sort

    const arr = [5,2,4,3,6] --> 서버에서 온 데이터라면 정렬해서 주세요
    const arr = [1, 2, 3, 4, 5]
    arr.sort((a,b) => a-b) //compare function 


-------------------------------------------

reduce
    reduce가 어떻게 동작하는지
    누적을 구하기 위한 함수

    첫 누적 변수 - 정의 -> 1번째 요소
    첫 누적 변수 - 정의 x -> 1번째 요소가 누적 변수, 2번째 요소

    arr.reduce((누적변수, 현재요소, 인덱스) => {
        return 누적 변수
    }, 기본값)
    
    const numbers = [1,2,3,4,5,6,7,8,9,10]

    numbers.reduce((sum, n) sum + n, 10) 10부터 시작 ex) 10 + 1 + 2 + 3 + ... + 10


-------------------------------------------

flat
    const arr = [[1,2], [3,4],[5,6]]
    arr.flat() = [1,2,3,4,5]

-------------------------------------------

메서드 체이닝

const a = {
    func() {
        return arr
    },
    foo: function() {

    },
    bar: () => {
        this(x)
    }

}

a.func().map().flat().filter()
  ------
  array

es-tool-kit //토스에서 만든것
loadash
rx-js/ts
effect
...

-------------------------------------------

고차함수 사용할 때 중요하게 생각해야하는 키 포인트

1. 복사본을 생성
2. 원본 배열을 훼손 
3. 반환하는 값을 필요로 했는지
- 특정 요소를 찾아서 그 요소의 일부분을 바꿀거야! -> find, findIndex   
(배열안의 객체이면 더욱 더)

const arr = [
    {title: "name", content: "content"}
]

if (arr[0] = {title:"name", content: "content"})

*************** 참조값(객체의 주소) ***************

-------------------------------------------

순회만을 위해서 배열의 고차함수를 사용하는 것은 올바른가? (x)

1. for문을 쓰시면 됩니다.
2. 어차피 처음부터 끝까지 반복할 건데 초기식, 조건식 정의하는 것
3. forEach, for of

arr.forEach((el,index) => 순회) -- 순회하면서 인덱스가 필요하면 사용, 순서 보장
for (const el of arr) {   -- 그냥 순회만 하면 되면 사용
    //순회
}

-------------------------------------------
객체를 반복하고 싶을 때 사용하는 것이 for in

const seongyong = {
    age: 20;
    height: "190cm"
}

for (const key in seongyong) {
    seongyong[key] // 20, "190cm"
}

Object.keys(), Object.values(), Object.entries()
// 배열로 변환한 목적
// 배열로 관련된 메서드를 사용하고 싶어서

Object.keys(seongyong).map((key)=> ...)
 //[age, height]

*** 충분히 고려한 서계 좋은 코드를 만든다 **

-------------------------------------------

**

과제
일요일 저녁, 월요일 오전~오후 -> 단톡으로 전송
노션 문서
10문제 ~ 15문제 사이

난이도: 최하 ~ 하
문제 풀이 시간 1~2시간 소요

**

-------------------------------------------

빌트인객체 
날짜, 문자열, 숫자 관련된 빌트인 객체
DOM API

-------------------------------------------






