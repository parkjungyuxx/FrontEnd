웹포퍼먼스 프로파일링
엠플리튜드 분석

-------------------------------------------------
배열의 유틸함수

indexOf 
    배열의 요소에서 매개 변수(인수)로 전달된 요소를 검색하여 인덱스를 반환

    const arr = [1,2,3,4]
    arr.indexOf(3) // 2
    arr.indexOf(5) // -1 (요소를 찾지 못했댜)

    정확히 해당 요소가 어느 순서에 위치해 있는지 확인하기 위해서 사용
    string (문자열) = 유사배열 indexOf, length등 몇가지 사용가능

includes 
    ES7 (2016)
    boolean 반환, 해당 요소가 존재하면 true, 아니면 false

    if(arr.includes(3)) // 3이 있으면 true, 아니면 false

concat
    서로 다른 두 배열을 하나로 합친 배열을 반환하는 함수
    const arr1 = [1,2,3]
    const arr2 = [4,5,6]
    arr1.concat(arr2) // [1,2,3,4,5,6]

    * 복사본을 반환한다 (아주 중요)
-------------------------------------------------

    * 원본 배열을 수정한다 (아주 중요)

    const arr = arr1.concat(arr2)
    console.log(arr1) // [1,2,3]
    console.log(arr) // [1,2,3,4,5,6]

join
    원본 배열의 모든 요소를 문자열로 변환한 후 
    인자에 들어간 요소로 연결된 문자열을 반환

    const arr = [010,1234,5678] 
    arr.join("-") // "010-1234-5678"


split
    문자열을 인자 기준으로 나눈 배열을 생성
    const str = "안녕 하세오"
    str.split(" ") // ["안녕", "하세요"]

-------------------------------------------------

slice 
    복사본을 반환
    배열의 특정 부분만 잘라서 사용하고 싶다

    slice(start, end) end 직전까지

    const arr = [1,2,3,4]
    arr.slice(0,3) // 0,1,2
    slice(3) // 0이 생략됨

    -가 붙으면 (-1이 맨마지막 인덱스)
    slice(-1, 2) // 맨 마지막 요소에서부터 2번째 직전까지
    slice(-2, 2) // 맨 마지막에서 두번째 요소부터 2번째 직전까지
    slice(2, -1) // 2번째 인덱스부터 맨마지막 직전(맨마지막에서 두번째)

splice
    원본 배열을 훼손
    특정 요소를 제거하거나 대체하는 용도로

    splice(start, count, item1, item2, item3, ...)
        ---index
    
    const arr = [1,2,3,4,5]
    const a = arr.splice(1, 3) // 2,3,4
    console.log(arr) // 1,5

    const arr = [1,2,3,4,5]
    const a = arr.splice(1,3,"안녕하세요","저는")
    console.log(arr) // 1, "안녕하세요", "저는", 5

** 여러분들의 의도대로 값이 출력되고 사용되는지 꼭 확인 **

-------------------------------------------------

reverse 
    
    const arr = [1,2,3,4,5]
    const temp_arr = [...arr]

    arr.reverse()
    console.log(arr) // [5,4,3,2,1] - 원본 배열이 변형되기 때문에, 원본 배열을 건드리고 싶지 않다면 복사해서 사용

-------------------------------------------------

콜백함수 

function map (함수) {
    함수 실행
}

-------------------------------------------------

1. map은 실행문
2. map의 매개변수로 전달되는 값 ()=>{} (실행문 -> 선언문)
3. () => {} 익명함수는 선언문
4. map에 전달된 익명함수의 이름을 우리가 뭐로 명시 func
5. 기명함수로 전환된 func은 실행 가능 불가능?
6. map안에서 해당 함수를 실행해줍니다
7. 실행할 때 매개변수 전달할 수 있어요. 1 과 2
8. func에서 전달한 1과 2는 func의 선언문
9. (num1, num2) => {}   

-------------------------------------------------

배열의 고차함수
map
    배열을 순회합니다
    순차적으로 반복합니다 (0~끝 순차적으로 반복한다)
    배열의 요소를 반환하여 새로운 배열을 만드는 용도로 사용

    ex)
    const arr = [1,2,3,4,5]

    const map = arr.map((x) => x+10)

filter


find


findIndex


every


some

-------------------------------------------------










