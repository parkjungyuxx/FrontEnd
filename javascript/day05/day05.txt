
객체
그룹화, 추상화 

-----------------------------------------------

배열 

순서(정렬된 값의 집합), 인덱스

prev, next

1. 순서가 중요한 경우 (배너 광고, 페이지네이션)
2. 유틸 함수(편의성)를 사용해야 하는 경우
    - 특정한 조건이 맞는 데이터를 찾거나
    - 반복 및 순회 해야하는 작업이 있을 경우

    서버에서 게시글 목록을 받아왔을 것
    우리가 게시글 왜 받아왔어요? -> 사용자에게 보여주려고
    
    1. 100개의 게시글을 일일히 Htm로 직접 작업해서 보여준다
    2. 순회해서 1개의 html을 100번 반복하고 내용물만 다르게 한다

    순회 했을 때의 유틸 함수가 배열이 지원하는 경우가 많습니다.   순회 = 순서가 보장된 반복 1번이 끝나야 다음으로 넘어감

    객체도 반복이 가능 -> 순서를 보장하지는 않습니다
    그러나 순회의 경우 순서를 보장할 수 있다


const arr = [1, 2, "3", {}, []]

다른 언어랑 다른 점: 자바스크립트 자료형은 있지만 선언 시에는 자료형을 정하지 않습니다.

arr.length /// 5 --> 요소(element) 갯수
arr[순서] // 순서에 맞는 요소
arr[3] // -> {}

q. 배열의 마지막 요소의 값을 가지고 오는 방법 -> arr[arr.length-1], arr.at(-1)

const arr = [1,2,3,4,5] -> 상수
arr[2] = 6 -> 됩니다.

arr = [4,5,6] -> x


const jungyu = {}
jungyu.name = "박준규"

자바스크립트의 자료형 (참조 데이터, 원시 데이터)

콜스택, 힙메모리


-----------------------------------------------

게시글 100개
게시글 번호가 28번인 게시글 찾아라 -> 객체

let posts = {
    28: {
        title: "게시글
    }
}
게시글에서 순서가 5번째인 게시글을 찾아라 -> 배열 -> 배열에서 지원하는 강력한 유틸 함수 -> 특정 데이터를 핉터링

let posts = [
    {
        no: 28
        title: "게시글"
    }
]


-----------------------------------------------

배열 및 객체의 고차함수



