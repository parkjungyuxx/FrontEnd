
변수 
-> 연산의 결과를 컴퓨터에게 기억, 재사용되는

제어문
-> 제어의 흐름이 개발자, 실행할지 말지 (개발자에게 선택권이 있다)


if, else if, else (분기)
switch (값 분기, 가독성)

---------------------------------------

연산자

(+, -, /, *, %)

 let a = 3 + 3 // 6
 let a = 5 % 2 // 1

  let a = "안녕 + "하세요" // "안녕하세요"
  let b = "1" + 2 // "12"

조건식(true/false)
 let a = 3;
 a === 3 (일치연산자) true
 a === "3" //false
 값 뿐만 아니라 데이터 타입까지 검색

 a == 3 (동등연산자) // true
 a == "3" // true
 값만 검사

 a !== 3 불일치연산자 // false
 a !== "3" // true
 값 혹은 데이터 타입을 감지

 a != 3 (부등 연산자) // false
 a != "3" // false 

!=, !== (부등, 불일치에서는) true(다르다), false(같다)
부등의 경우 값만 비교 3, "3"은 값이 같아요 -> false
단 일치의 경우 값과 타입의 비교 number, string은 다른데? -> true

a != 5 (true)
a !=== 5 (true) -> 딱 값만 봐도 다르니까 true

달라? -> 응 달라 (true)
     -> 아니 같아 (false)

!(a === 3) -> false
 -----
 true

에제
  *자동차가 시동이 켜져있을 때만 에어컨을 킬 수 있다

  let isEngine = true;
  if (isEngine) {
    console.log("에어컨이 켜졌습니다")
  }

  if (!isEngine) return; // early return (종료문, 반환문(함수)) 부정 연산자

  let a = 5;
  console.log("에어컨이 켜졌습니다");
  console.log(a);

종료문 (break, return) -> "해당 문법을 실행하면, 다음 코드는 실행하지 않는다"

---------------------------------------

falsy, truthy(값이 true이거나 false는 아니지만 true 혹은 false와 같이 취급되는 것)

falsy
== false (true)

0
null
undefined
NaN (Not a number)
""

truthy

값이 있는 경우


---------------------------------------

예제

let input = " "

if(input) console.log("실행")

truthy와 falsy가 조건식에 들어가면 boolea과 같이 작용한다

---------------------------------------

단항 연산자

a++ (a = a + 1)
++a (a = a + 1)

후위연산자, 전위연산자

if(){
    a++
    console.log(a)
}

console.log(a)
a++
console.log(a)

---------------------------------------

let a = 3;
a = a + 1; //4
---
a += 1; //4


---------------------------------------


조건부연산자 (삼항연산자, 조건연산자)

let a = 3;
        조건식? 참인 경우 return : 거짓인 경우 return
let b = a === 3 ? 5 : 2;
b = 5;

let b;
if ( a === 3) {
    b = 5;
} else {
    b = 2;
}
---------------------------------------

?? (?? || 다른거)  얘는 할당에 관련된거 단축평가는 평가 논리 연산자

let c = (a === 3) && b (조건식이 true면 b를 할당해라)
let d = c ?? b // 5 (c의 값이 있으면 c 아니면 b - 기본)

---------------------------------------

논리 연산자

let isDisabled = 값이 없는 경우, 에러가 생긴 경우, 특정 값이 숫자인 경우
!value, !error, typeof input === number

&& (and) || (or) 
let isDisabled = !value || !error || typeof input === number

let isDisabled = !value && !error && typeof input === number

true || false || false || false || => true

true && false && false && false => false 

true && true && true && true => true

재사용이 안되면 변수에 담을 필요가 있을까? 
(X) 재사용이 안되도 변수를 사용할 필요가 있다 (협엽)


---------------------------------------

** 함수

자동차가 시동이 걸리는 기능을 만들어보세요
let isEngine = false;
--> let isEngine = true;

시동을 거는 것 --- 연산 (기능)
이 코드 블럭 --- 함수 --- 재사용

function 2000줄 하나의 함수로 구현
필요에 따라 기능을 만들고 100~200줄짜리 코드가 10개 

fucntion(car) {
    engineOn()
}

1. 연산 재사용
2. 모듈 분리, 확장성 용이

=> function
- 코드에 대한 집합
- 집합이 특정한 기능을 유추
- 특정한 기능을 하는 코드의 집합


console.log()

변수 -> 값

함수 -> 코드(기능)




---------------------------------------


** 변수 -> 왜 써야하는지 -> 납득
- 연산x 재사용
- 협업, 변수명

** early return - 컴퓨터가 불필요한 실행을 방지하기 위해`
** 연산자 (~을 할 수 있다, 편의성)
** 학습 방향성 (고민하다가 이도저도 아닌 상황만 아니면 됩니다, 남의 말에 휘둘리지 마세요)
** 액션 아이템 (단순히 계획만 늘어놓지 말고) -> 흐지부지

---------------------------------------

함수
객체
문제풀이

