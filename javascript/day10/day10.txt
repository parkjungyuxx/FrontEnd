
버블링
자식 요소의 이벤트가 부모요소에게 영향을 끼치는 것 (자식요소의 이벤트가 실행되면 부모 요소의 이벤트도 실행하는 것)

<div> -- event
 <p> -- 클릭 -> event가 발생

버블링이 발생하는 것은 당연한 것이기 때문에 default value

div.addEventListner('click', e => {
    console.log("div 클릭")
})

p.addEventListner('click', e => {
    console.log("p 클릭")
})

여기서 p를 클릭하면 'div 클릭', 'p 클릭' 이 함께 발생
내 **의도**가 p를 클릭했을 때는 'p 클릭' 만 나왓으면 좋겟어

버블링을 결국에 막아야함
e.stopPropagation()
상위 요소의 이벤트를 감지하지 않고 현재 이벤트가 발생되는 요소의 이벤트만 검색

캡쳐링
버블링 반대 개념, 부모 요소의 이벤트가 발생하면 자식 요소까지 발생하는 것

버블링 
자식 -> 부모 전파 (자식에서 이벤트전파를 막으면 부모까지 도달하지 않습니다)

---

캡쳐링
부모 -> 자식 전파 (전파를 막기가 어렵습니다, 캡쳐링은 default value가 false입니다)

---

div.addEventListner("click", callback, true)

자식 요소 이벤트가 실행되기 전에 부모 요소들의 이벤트가 실행되어야 하면 캡쳐링 신경 쓰면 되겟죠


-------------

1. 김성용 수정 삭제
2. 김사과 수정 삭제
3. 이름 수정 삭제 +


인풋 추가버튼

-------------

추가 이벤트 -> 인풋요소의 value를 가지고와서 특정 요소의 자식요소로 추가하는 이벤트
수정 이벤트 -> 수정버튼을 누르면 김성용이라고 하는 요소가 입력 요소로 변환되는 이벤트
삭제 이벤트 -> 삭제 버튼을 누르면 해당 요소가 자식 요소에서 삭제되는 이벤트


